<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kb.star.util.UserDao">
	<!-- 쿼리문 -->
	<!-- 부서id조회 -->
	<select id="departmentAdmin" resultType="int">
		select DepartmentID from
		Users where
		UserID=#{param1}
	</select>
	<!-- 부서의 전체 유저리스트 -->
	<select id="userListAdmin"
		resultType="com.kb.star.dto.UserListDto">
		SELECT
		u.UserID,
		u.UserName,
		u.Email,
		u.birth,
		u.Password,
		d.DepartmentName,
		t.TeamName,
		u.ProfileImg,
		u.IsDelete,
		u.IsAdmin
		FROM
		Users u
		LEFT JOIN
		Departments d ON u.DepartmentID = d.DepartmentID
		LEFT
		JOIN
		Teams t ON u.TeamID = t.TeamID
		WHERE
		u.DepartmentID =
		#{departmentId}
	</select>
	<!--유저 마이페이지 리스트 -->
	<select id="userListUser"
		resultType="com.kb.star.dto.UserListDto">
		SELECT
		u.UserID,
		u.UserName,
		u.Email,
		u.birth,
		u.Password,
		d.DepartmentName,
		t.TeamName,
		u.ProfileImg,
		u.IsDelete,
		u.IsAdmin
		FROM
		Users u
		LEFT JOIN
		Departments d ON u.DepartmentID = d.DepartmentID
		LEFT
		JOIN
		Teams t ON u.TeamID = t.TeamID
		WHERE
		u.UserID =
		#{UserID}
	</select>
	<select id="getdepartmentName" resultType="String">
		select DepartmentName
		from Departments where DepartmentID = #{param1};
	</select>
	<select id="getTeamName" resultType="com.kb.star.dto.Teams">
		select * from Teams where
		DepartmentID = #{param1};
	</select>
	<insert id="insertUser" parameterType="com.kb.star.dto.UsersDto">
		INSERT INTO Users (UserID,
		UserName, Email, birth, Password, DepartmentID,
		TeamID, ProfileImg,
		IsDelete, IsAdmin)
		VALUES (#{param1}, #{param2}, #{param3}, #{param4},
		#{param5},
		#{param6}, #{param7}, null, false, false)
	</insert>

	<select id="userDepartment" resultType="String">
		select DepartmentID from
		Users where UserId=#{param1}
	</select>

	<select id="userList" resultType="com.kb.star.dto.UsersDto">
		select * from Users where
		DepartmentID=#{param1} and UserId!=#{param2}
	</select>

	<insert id="insertNewRoom">
		INSERT INTO MeetingRooms
		(RoomTitle,Description,DepartmentID,TeamID,RoomManagerID,StageID,EndDate)
		values (#{param1},#{param2},#{param3},#{param4},#{param5},1,#{param6})
	</insert>

	<select id="roomNumConfirm" resultType="int">
		select max(RoomID) from
		MeetingRooms where RoomManagerID=#{param1}
	</select>



	<insert id="insertNewTimer">
		INSERT INTO Timer values
		(#{param1},0,now(),#{param2})
	</insert>

	<insert id="insertUserIntoRoom">
		INSERT INTO MeetingRoomMembers values (#{param1},
		#{param2}, "noPick", 0, 0)
	</insert>


	<insert id="insertThisStage0">
		INSERT into StageParticipation
		(IdeaID,StageID,UserID,Status,RoomID) values
		(0,0,#{param1},1,#{param2})
	</insert>


	<select id="myMeetingRoom"
		resultType="com.kb.star.dto.MeetingRooms">
		SELECT mr.* from MeetingRooms mr inner join
		MeetingRoomMembers mrm on
		mr.RoomID = mrm.RoomID
		where mr.IsDelete = 0
		and mrm.UserID = #{param1} and mr.EndDate >=
		curdate() order by
		mr.RoomID desc limit 4;
	</select>

	<insert id="insertForwardStage1">
		INSERT into StageParticipation
		(IdeaID,StageID,UserID,Status,RoomID) values
		(0,1,#{param1},0,#{param2})
	</insert>
	<!-- 프로필사진 업데이트 -->
	<update id="updateProfileImg" parameterType="map">
		UPDATE Users
		SET
		ProfileImg = #{param2}
		WHERE UserID = #{param1}
	</update>

	<!-- 회의방목록볼때 회의방별 팀명 조회하기위한 쿼리문 -->
	<select id="myDepartmentTeams"
		resultType="com.kb.star.dto.Teams">
		select * from Teams WHERE DepartmentID=#{param1}
	</select>

	<select id="myAllMeetingRoom"
		resultType="com.kb.star.dto.MeetingRooms">
		SELECT mr.* from MeetingRooms mr inner join
		MeetingRoomMembers mrm on mr.RoomID = mrm.RoomID
		where mr.IsDelete = 0
		and mrm.UserID = #{param1} order by mr.RoomID desc
	</select>

	<!-- 회원삭제 -->
	<update id="deleteUser" parameterType="map">
		UPDATE Users
		SET
		IsDelete =
		#{param2}
		WHERE UserID = #{param1}
	</update>
	<!-- 직원 목록 조회 (검색 및 페이지네이션) -->
	<select id="searchEmployees" parameterType="map"
		resultType="com.kb.star.dto.UserListDto">
		SELECT u.*, d.DepartmentName, t.TeamName
		FROM Users u
		LEFT
		JOIN Departments d ON u.DepartmentID = d.DepartmentID
		LEFT JOIN Teams t
		ON u.TeamID = t.TeamID
		WHERE u.IsDelete = 0
		AND u.UserID != 1
		AND
		(u.UserName LIKE CONCAT('%', #{searchTerm}, '%')
		OR t.TeamName LIKE
		CONCAT('%', #{searchTerm}, '%'))
		LIMIT #{offset}, #{limit}
	</select>

	<!-- 직원 목록 수 조회 (검색용) -->
	<select id="countEmployees" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM Users u
		LEFT JOIN Teams t ON u.TeamID = t.TeamID
		WHERE u.IsDelete = 0
		AND u.UserID != 1
		AND (u.UserName LIKE CONCAT('%',
		#{searchTerm}, '%')
		OR t.TeamName LIKE CONCAT('%', #{searchTerm}, '%'))
	</select>

	<select id="userDepartmentId" resultType="int">
		select DepartmentID from
		Users where UserId=#{param1}
	</select>
	
	<!-- 페이지네이션 -->
	<select id="myAllMeetingRoomPaginated" resultType="com.kb.star.dto.MeetingRooms">
	    SELECT mr.*
	    FROM MeetingRooms mr
	    INNER JOIN MeetingRoomMembers mrm ON mr.RoomID = mrm.RoomID
	    WHERE mr.IsDelete = 0
	      AND mrm.UserID = #{userId}
	    ORDER BY mr.RoomID DESC
	    LIMIT #{start}, #{pageSize}
	</select>

    <select id="countMyAllMeetingRooms" resultType="int">
	    SELECT COUNT(DISTINCT mr.RoomID)
	    FROM MeetingRooms mr
	    INNER JOIN MeetingRoomMembers mrm ON mr.RoomID = mrm.RoomID
	    WHERE mr.IsDelete = 0
	      AND mrm.UserID = #{userId}
	</select>
<!-- TodoList -->
<select id="getUserTodoListForToday" resultType="com.kb.star.dto.TodoDto">
    SELECT 
        DATE_FORMAT(t.endTime, '%Y.%m.%d') AS dueDate,
        mr.RoomTitle,mr.StageID,mr.RoomID,
        s.Status AS stageStatus
    FROM 
        Timer t
    JOIN 
        MeetingRooms mr ON t.RoomID = mr.RoomID
    JOIN 
        Stages s ON mr.StageID = s.StageID
    JOIN 
        StageParticipation sp ON mr.RoomID = sp.RoomID AND mr.StageID = sp.StageID
    WHERE 
        sp.UserID = #{userId}
        AND sp.Status = 0
        AND DATE(t.endTime) = CURDATE()
        AND t.endTime > NOW()  -- 현재 시간 이후의 항목만 선택
    ORDER BY 
        t.endTime ASC
</select>
<!-- 날짜별 todolist (기존 쿼리 수정) -->
<select id="getUserTodoListByDate" resultType="com.kb.star.dto.TodoDto">
    SELECT 
        DATE_FORMAT(t.endTime, '%Y.%m.%d') AS dueDate,
        mr.RoomTitle,mr.StageID,mr.RoomID,
        s.Status AS stageStatus
    FROM 
        Timer t
    JOIN 
        MeetingRooms mr ON t.RoomID = mr.RoomID
    JOIN 
        Stages s ON mr.StageID = s.StageID
    JOIN 
        StageParticipation sp ON mr.RoomID = sp.RoomID AND mr.StageID = sp.StageID
    WHERE 
        sp.UserID = #{userId}
        AND sp.Status = 0
        AND DATE(t.endTime) = #{date}
        AND t.endTime > NOW()  -- 현재 시간 이후의 항목만 선택
    ORDER BY 
        t.endTime ASC
</select>
</mapper>
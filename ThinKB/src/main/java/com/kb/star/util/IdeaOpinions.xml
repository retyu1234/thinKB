<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  
<mapper namespace="com.kb.star.util.IdeaOpinionsDao">

	<!-- ideaOpinionsList.jsp -->
    <!-- 각 모자 색상에 따른 상위 5개 의견 검색 -->
    <select id="findTop5ByHatColor" resultType="com.kb.star.dto.IdeaOpinionsDto">
        SELECT io.*, u.UserName
        FROM IdeaOpinions io
        JOIN Users u ON io.UserID = u.UserID
        WHERE io.HatColor = #{hatColor} AND io.IsDelete = false
        ORDER BY io.CreatedAt DESC
        LIMIT 5
    </select>
    
    
    
	<!-- ideaOpinions.jsp -->
	<!-- 알림 테이블의 IdeaID컬럼으로 Ideas 테이블 정보 가져오기 -->
    <select id="getIdeaTitleById" resultType="com.kb.star.dto.Ideas">
        SELECT Title 
        FROM Ideas 
        WHERE IdeaID = #{ideaId}
    </select>
    
	<!-- HatColor에 따라 의견 검색 + UserID를 가지고 UserName 알아오기 -->
	<select id="findByHatColor" resultType="com.kb.star.dto.IdeaOpinionsDto">
        SELECT io.*, u.UserName 
        FROM IdeaOpinions io
        JOIN Users u ON io.UserID = u.UserID
        WHERE io.IdeaID = #{ideaId} 
          AND io.HatColor = #{hatColor} 
          AND io.Step = 1 
          AND io.IsDelete = false
    </select>

    <!-- 의견 추가 -->
    <insert id="insertOpinion"> 
        INSERT INTO IdeaOpinions (IdeaID, UserID, OpinionText, HatColor, LikeNum, IsDelete, CreatedAt)
        VALUES (#{ideaID}, #{userID}, #{opinionText}, #{hatColor}, #{likeNum}, #{isDelete}, #{createdAt})
    </insert>

    <!-- 의견 삭제 -->
    <update id="deleteOpinion" parameterType="int">
        UPDATE IdeaOpinions 
        SET IsDelete = true
        WHERE OpinionID = #{opinionId}
    </update>
    
    <!-- 회의방 참여자 수 -->
    <select id="getUserCount" resultType="int">
        SELECT COUNT(*) FROM MeetingRoomMembers WHERE RoomID = #{roomId}
    </select>
    
    <!-- ideaId, 견해별 작성된 의견 수 -->
    <select id="getOpinionCountByHatColorAndIdeaId" resultType="int">
        SELECT COUNT(*) FROM IdeaOpinions WHERE IdeaID = #{ideaId} AND HatColor = #{hatColor} AND Step = 1 AND IsDelete = false
    </select>
    
	<!-- 사용자가 각 탭에 작성한 댓글 수 -->
	<select id="getUserCommentedTabs" resultType="String">
	    SELECT DISTINCT HatColor FROM IdeaOpinions 
	    WHERE UserID = #{userId} AND IdeaID = #{ideaId} AND IsDelete = false
	</select>
	
	<!-- 각 사용자가 작성한 전체 의견 수 -->
    <select id="getUserOpinionCount" resultType="int">
	    SELECT COUNT(*) FROM IdeaOpinions WHERE UserID = #{userId} AND IdeaID = #{ideaId} AND Step=1 AND IsDelete = false
	</select>
	
	<!-- 2개 이상 의견 작성시 StageParticipation테이블의 status 업데이트 -->
    <update id="updateStatus">
	    UPDATE StageParticipation
	    SET Status = #{status}
	    WHERE UserID = #{userId} AND IdeaID = #{ideaId} AND RoomID = #{roomId}
	</update>
	<!-- 2개 이상 의견 작성시 MeetingRoomMembers테이블의 기여도 +1 / -1 -->
    <update id="updateContribution">
	    UPDATE MeetingRoomMembers m
	    JOIN StageParticipation s 
	    ON m.UserID = s.UserID AND m.RoomID = s.RoomID
	    SET m.ContributionCnt = m.ContributionCnt + 
								(CASE 
						            WHEN #{status} = true THEN 1 
						            ELSE -1 
						        END)
	    WHERE s.IdeaID = #{ideaId} and s.UserID = #{userId} AND s.RoomID = #{roomId} AND s.StageID = 3;
	</update>
	
	
	<!-- 타이머 종료시간 -->
    <select id="getEndTime" parameterType="map" resultType="string">
        SELECT endTime
        FROM Timer
        WHERE RoomID = #{roomId} AND IdeaID = #{ideaId}
    </select>
    
    <!-- MeetingRooms테이블에서 방장ID 가져오기 -->
    <select id="getRoomManagerId" parameterType="int" resultType="int">
        SELECT RoomManagerID
        FROM MeetingRooms
        WHERE RoomID = #{roomId}
    </select>
    
    <!-- 방장전용 - stage3 완료자 수 -->
    <select id="getDoneUserCount" resultType="int">
        SELECT count(*)
        FROM StageParticipation
        WHERE RoomID = #{roomId} AND IdeaID = #{ideaId} AND StageID = 3 AND Status = 1;
    </select>
    
    
    
    
    <!-- 다음 단계 -->
    <!-- Timer 시간 새로 insert 해주기 -->
    <update id="updateNewTimer">
    	UPDATE Timer SET StartTime = now(), endTime = #{formattedTime}
		WHERE RoomID = #{roomId} and IdeaID = #{ideaId};
	</update>
	
   	<!-- MeetingRooms에서 stage 4로 변경 -->
	<update id="updateStage">
		UPDATE MeetingRooms SET StageID = 4
		WHERE RoomID = #{roomId};
	</update>
	
    <!-- Ideas에서 아이디어 StageID 4로 변경 -->
    <update id="updateIdeaStage">
		UPDATE Ideas SET StageID = 4
		WHERE IdeaID = #{ideaId};
	</update>
    
    <!-- 방번호별 userList -->
	<select id="RoomForUserList" resultType="Integer">
		SELECT UserID from
		MeetingRoomMembers WHERE RoomID=#{param1}
	</select>
	
	<!-- StageParticipation에서 참여자별 StageID 4로 새로 생성해서 Status 0으로 일괄 넣기 -->
	<insert id="insertStageParticipation">
		INSERT into StageParticipation (IdeaID,StageID,UserID,Status,RoomID) values (#{ideaId},4,#{list},0,#{roomId})
	</insert>
    
    
    
    
    <!-- ideaOpinions2.jsp -->
    <!-- 특정 아이디어의 의견을 가져오는 쿼리 -->
    <select id="findOpinionsByIdeaId" parameterType="int" resultType="com.kb.star.dto.IdeaOpinionsDto">
        SELECT * FROM IdeaOpinions WHERE IdeaID = #{ideaId} AND IsDelete = false
    </select>
    
    <!-- 이전 의견을 가져오는 SQL 쿼리 -->
    <select id="getPreviousOpinionsByHatColor" parameterType="map" resultType="com.kb.star.dto.IdeaOpinionsDto">
	    SELECT io.*, u.UserName 
	    FROM IdeaOpinions io
	    JOIN Users u ON io.UserID = u.UserID
	    WHERE io.IdeaID = #{ideaId} AND io.HatColor = #{hatColor} AND io.Step = 1  AND io.IsDelete = false
        <!-- SELECT * FROM IdeaOpinions WHERE IdeaID = #{ideaId} AND HatColor = #{hatColor} ORDER BY CreatedAt DESC -->
    </select>
    
    <!-- 의견 추가2 -->
    <insert id="insertOpinion2" parameterType="com.kb.star.dto.IdeaOpinionsDto">
        INSERT INTO IdeaOpinions (IdeaID, UserID, Step, OpinionText, HatColor, LikeNum, IsDelete, CreatedAt)
        VALUES (#{ideaID}, #{userID}, #{step}, #{opinionText}, #{hatColor}, #{likeNum}, #{isDelete}, #{createdAt})
    </insert>
    

	<!-- 중복작성 방지 -->    
     <!-- 사용자가 각 탭에 작성한 댓글 수 -->
    <select id="getUserCommentedTabs2" resultType="String">
        SELECT distinct HatColor 
        FROM IdeaOpinions 
        WHERE UserID = #{userId} AND IdeaID = #{ideaId} AND Step=2 AND IsDelete = false
    </select>
    <!-- 사용자가 작성한 전체 의견 수 -->
    <select id="getUserOpinionCount2" resultType="int">
        SELECT COUNT(*) 
        FROM IdeaOpinions 
        WHERE UserID = #{userId} AND IdeaID = #{ideaId} AND Step=2 AND IsDelete = false
    </select>
    <!-- 1개 이상 의견 작성시 StageParticipation테이블의 status 업데이트 -->
    <update id="updateStatus2">
        UPDATE StageParticipation
        SET Status = #{status}
        WHERE UserID = #{userId} AND IdeaID = #{ideaId} AND RoomID = #{roomId}
    </update>
    <!-- 1개 이상 의견 작성시 MeetingRoomMembers테이블의 기여도 +1 / -1 -->
    <update id="updateContribution2">
	    UPDATE MeetingRoomMembers m
	    JOIN StageParticipation s 
	    ON m.UserID = s.UserID AND m.RoomID = s.RoomID
	    SET m.ContributionCnt = m.ContributionCnt + 
								(CASE 
						            WHEN #{status} = true THEN 1 
						            ELSE -1 
						        END)
	    WHERE s.IdeaID = #{ideaId} and s.UserID = #{userId} AND s.RoomID = #{roomId} AND s.StageID = 4;
	</update>
    <!-- 사용자별 특정 탭에 이미 작성한 의견이 있는지 확인하는 메서드(중복작성방지) -->
    <select id="countUserOpinionsInTab" resultType="int">
	    SELECT COUNT(*)
	    FROM IdeaOpinions
	    WHERE UserID = #{userId} AND IdeaID = #{ideaId} AND HatColor = #{hatColor} AND Step = 2
	</select> 


    <!-- 모자 색상에 따라 현재 의견을 가져오는 SQL 쿼리 -->
    <select id="getCurrentOpinionsByHatColor" parameterType="map" resultType="com.kb.star.dto.IdeaOpinionsDto">
        SELECT io.*, u.UserName 
        FROM IdeaOpinions io
        JOIN Users u ON io.UserID = u.UserID
        WHERE io.IdeaID = #{ideaId} AND io.HatColor = #{hatColor} AND io.Step = 2 AND io.IsDelete = false
        ORDER BY io.LikeNum DESC
    </select>
    
    <!-- 특정 의견에 대한 모든 좋아요 삭제 -->
	<delete id="deleteLike" parameterType="int">
	    DELETE FROM LikeVotes WHERE OpinionID = #{opinionId}
	</delete>
    <!-- 의견 삭제2 -->
<!--     <delete id="deleteOpinion2" parameterType="int">
        DELETE FROM IdeaOpinions WHERE OpinionID = #{opinionId}
    </delete> -->
    <update id="deleteOpinion2" parameterType="int">
        UPDATE IdeaOpinions 
        SET IsDelete = true
        WHERE OpinionID = #{opinionId}
    </update>
    
    <!-- 좋아요 수 증가 -->
    <update id="increaseLikeNum">
        UPDATE IdeaOpinions 
        SET LikeNum = LikeNum + 1 
        WHERE OpinionID = #{opinionId}
    </update>

    <!-- 좋아요 수 감소 -->
    <update id="decreaseLikeNum">
        UPDATE IdeaOpinions 
        SET LikeNum = LikeNum - 1 
        WHERE OpinionID = #{opinionId}
    </update>

    <!-- 현재 좋아요 수 가져오기 -->
    <select id="getLikeNum" resultType="int">
        SELECT LikeNum 
        FROM IdeaOpinions 
        WHERE OpinionID = #{opinionId}
    </select>
    
    <!-- 좋아요 수만큼 MeetingRoomMembers테이블의 기여도 증가 -->
    <update id="updateContributionLikeNum">
	    UPDATE MeetingRoomMembers m
	    JOIN StageParticipation s 
	    ON m.UserID = s.UserID AND m.RoomID = s.RoomID
	    SET m.ContributionCnt = m.ContributionCnt + 
								(CASE 
						            WHEN #{status} = true THEN 1 
						            ELSE -1 
						        END)
	    WHERE s.IdeaID = #{ideaId} and s.UserID = #{userId} AND s.RoomID = #{roomId} AND s.StageID = 4;
	</update>
	
    <!-- 사용자가 특정 의견에 좋아요를 눌렀는지 확인 -->
    <select id="checkUserLikedOpinion" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM LikeVotes
        WHERE UserID = #{userId} AND OpinionID = #{opinionId} AND IsLike = true
    </select>

    <!-- 좋아요 추가 -->
    <insert id="addUserLike">
        INSERT INTO LikeVotes (UserID, OpinionID, IsLike)
        VALUES (#{userId}, #{opinionId}, true)
    </insert>

    <!-- 좋아요 제거 -->
    <delete id="removeUserLike">
        DELETE FROM LikeVotes
        WHERE UserID = #{userId} AND OpinionID = #{opinionId}
    </delete>
    
    <!-- 방장전용 - stage4 완료자 수 -->
    <select id="getDoneUserCount2" resultType="int">
        SELECT count(*)
        FROM StageParticipation
        WHERE RoomID = #{roomId} AND IdeaID = #{ideaId} AND StageID = 4 AND Status = 1;
    </select>

</mapper>



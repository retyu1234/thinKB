<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kb.star.util.RoomDao">

	<!-- 방번호로 한개의 방 정보를 모두 가져오는 쿼리 -->
	<select id="roomDetailInfo"
		resultType="com.kb.star.dto.MeetingRooms">
		select * from MeetingRooms where RoomID=#{param1}
	</select>

	<select id="roomTimerInfo" resultType="String">
		select endTime from Timer
		where RoomID=#{param1} and IdeaID=0
	</select>

<select id="roomTimer" resultType="String">
	select endTime from Timer where RoomID=#{roomId} and IdeaID=0
</select>

<insert id="submitIdea">
	INSERT INTO Ideas (UserID,RoomID,Title,Description,IsDelete,StageID,PickNum) values 
	(#{param1},#{param2},#{param3},#{param4},0,1,0);
</insert>


	<update id="updateParticipantStage1">
		update StageParticipation set Status=1 WHERE
		RoomID=#{param1} and StageID=1
		and UserID=#{param2}
	</update>

	<!-- stage1인 방에 참여 했는지 안했는지 참여자별로 확인하는 쿼리 -->
	<select id="isParticipantsStage1" resultType="boolean">
		SELECT Status from
		StageParticipation WHERE RoomID=#{param1} and
		UserID=#{param2} and
		StageID=1
	</select>

	<!-- 스테이지 +1 -->
	<update id="updateStage">
		UPDATE MeetingRooms
		SET StageID = StageID + 1
		WHERE
		RoomID = #{roomId};
	</update>

	<!-- 이전에 냈던 초안이 있는지 조회해서 있으면 화면에 보여주고 수정할 수 있도록 -->
	<select id="ideaInfo" resultType="com.kb.star.dto.Ideas">
		SELECT * FROM Ideas WHERE
		RoomID=#{param1} and UserID=#{param2} and
		StageID=1 and IsDelete=0
	</select>

	<!-- 아이디어 수정시 기존 아이디어의 삭제여부 여로 업데이트 -->
	<update id="isDeleteUpdate">
		UPDATE Ideas set IsDelete=1 WHERE UserID=#{param1}
		and RoomID=#{param2} and
		IsDelete=0 and StageID=1
	</update>

	<!-- 초안작성 단계의 타이머 끝나면 방장한테는 아이디어 목록을 보여주는 쿼리 -->
	<select id="ideaList" resultType="com.kb.star.dto.Ideas">
		SELECT * FROM Ideas WHERE
		RoomID=#{param1} and IsDelete=0 and
		StageID=#{param2}
	</select>

	<!-- 방번호로 stage를 1에서 2로 업데이트 하는 쿼리 -->
	<update id="updateParticipantStage2">
		UPDATE MeetingRooms set StageID=2 WHERE
		RoomID=#{param1}
	</update>

	<!-- 방번호로 참여자 목록 가져오는 쿼리 -->
	<select id="RoomForUserList" resultType="Integer">
		SELECT UserID from
		MeetingRoomMembers WHERE RoomID=#{param1} and IsDelete=0
	</select>

	<!-- 초안 투표 진행하기 누르면 모든 참여자의 stage2의 참여여부 0인것 생성하는 쿼리 -->
	<insert id="insertForwardStage2">
		INSERT into StageParticipation
		(IdeaID,StageID,UserID,Status,RoomID) values
		(0,2,#{param1},0,#{param2})
	</insert>


	<!-- roomid별 방정보 -->
	<select id="selectRoomId" parameterType="int"
		resultType="com.kb.star.dto.MeetingRooms">
		SELECT *
		FROM MeetingRooms
		WHERE RoomID = #{roomId}
	</select>
	<!-- 룸아이디 타이머정보 -->
	<select id="selectTimersByRoomId" parameterType="int"
		resultType="com.kb.star.dto.TimersDto">
		SELECT t.RoomID, t.IdeaID, t.StartTime, t.endTime, i.Title,
		i.Description
		FROM Timer t
		LEFT JOIN Ideas i ON t.IdeaID = i.IdeaID
		WHERE t.RoomID = #{roomId}
	</select>
	<!-- 아이디어 목록 가져오기 -->
	<select id="selectIdeasByRoomId" parameterType="int"
		resultType="com.kb.star.dto.Ideas">
		SELECT IdeaID, Title, Description
		FROM Ideas
		WHERE RoomID =
		#{roomId} AND IsDelete = false
	</select>
	<!-- 방관리 타이머수정 -->
	<update id="roomMangeTimerUpdate">
		update Timer set endTime =#{param2} where RoomID =
		#{param1} and IdeaID =
		#{param3}
	</update>
	<!-- 방관리 회의방 내용 수정 -->
	<update id="updateRoomInfo">
		update MeetingRooms set
		RoomTitle=#{param1},Description=#{param2},EndDate=#{param3} where
		RoomID=#{param4}
	</update>
	<!-- 방별 참여자 리스트(검색x) -->
	<select id="selectCurrentMembersbefore"
		resultType="com.kb.star.dto.MeetingRoomMembers">
SELECT DISTINCT u.UserID, u.UserName, u.Email, d.DepartmentName, t.TeamName
FROM Users u
JOIN Departments d ON u.DepartmentID = d.DepartmentID
JOIN Teams t ON u.TeamID = t.TeamID
LEFT JOIN MeetingRoomMembers m ON u.UserID = m.UserID AND m.RoomID = #{roomId}
WHERE (m.UserID IS NULL OR m.IsDelete = 1)
  AND u.IsDelete = 0 AND u.DepartmentID = #{departmentId}
ORDER BY d.DepartmentName, t.TeamName, u.UserName
	</select>
	<!-- 참여자제외 한 유저리스트 -->
	<select id="selectAvailableEmployees"
		resultType="com.kb.star.dto.UserListDto">
		SELECT u.UserID, u.UserName, u.Email, d.DepartmentName,
		t.TeamName
		FROM Users u
		JOIN Departments d ON u.DepartmentID =
		d.DepartmentID
		JOIN Teams t ON u.TeamID = t.TeamID
		WHERE u.UserID NOT IN
		(
		SELECT m.UserID
		FROM MeetingRoomMembers m
		WHERE m.RoomID = #{roomId}
		AND m.IsDelete = 0
		)
		AND u.IsDelete = 0
		AND u.DepartmentID =
		#{departmentId}
	</select>
	<!-- 참여자 추가(방장) -->
	<insert id="addMeetingRoomMembers">
    INSERT INTO MeetingRoomMembers (RoomID, UserID, Role, ContributionCnt, IsDelete)
    VALUES
    <foreach collection="userIds" item="userId" separator=",">
        (#{roomId}, #{userId}, 'noPick', 0, false)
    </foreach>
    ON DUPLICATE KEY UPDATE
        Role = VALUES(Role),
        ContributionCnt = VALUES(ContributionCnt),
        IsDelete = VALUES(IsDelete)
	</insert>

	<!-- 참여자 추가(방장)/참여테이블에 추가 -->
<insert id="insertParticipation" >
    INSERT INTO StageParticipation (IdeaID, StageID, UserID, Status, RoomID)
    VALUES (#{ideaId}, #{stageId}, #{userId}, 0, #{roomId})
</insert>
<!-- 강퇴했을때 사용 -->
<update id="updateParticipation">
    UPDATE StageParticipation
    SET Status = 0, StageID = #{stageId}
    WHERE RoomID = #{roomId} AND IdeaID = #{ideaId} AND UserID = #{userId}
</update>

<!-- 참여자 추가할 때 ideaId 조회 -->
<select id="getTopIdeaIds" parameterType="int" resultType="int">
    SELECT DISTINCT IdeaID
    FROM StageParticipation
    WHERE RoomID = #{roomId}
    ORDER BY IdeaID DESC
    LIMIT 2
</select>
<!-- 이전에 방에 참여한 사람인지 조회 -->
<select id="checkExistingEntry" resultType="int">
        SELECT COUNT(*)
    FROM StageParticipation
    WHERE RoomID = #{roomId} AND IdeaID = #{ideaId} AND UserID = #{userId} AND StageID = #{stageId}
</select>

	<!-- 참여자 삭제 -->
	<update id="deleteMembers">
	update MeetingRoomMembers set IsDelete=true where RoomId=#{param1} and UserID=#{param2};
	</update>
	<!-- 회의방 참여상태+아이디어제목 조회  -->
	  <select id="getStatusIdeasTitle" resultType="com.kb.star.dto.StageParticipationIdeas">
    SELECT 
      sp.*, 
      i.Title
    FROM 
      StageParticipation sp
    JOIN 
      Ideas i ON sp.IdeaID = i.IdeaID
    WHERE 
      sp.RoomID = #{roomId}
  </select>
  <!-- 미참여자 알림 -->
  <insert id="insertNotifiNonParti">
    INSERT INTO Notifications (UserID, IdeaID, Message, IsRead, IsDelete, CreatedAt,RoomID)
    SELECT sp.UserID, sp.IdeaID, 
           CONCAT(i.Title, ' - ', #{stageId}, '단계 미참여입니다! 참여해주세요'), 
           0, 0, NOW(),#{roomId}
    FROM StageParticipation sp
    JOIN Ideas i ON sp.IdeaID = i.IdeaID
    WHERE sp.RoomID = #{roomId}
      AND sp.StageID = #{stageId}
      AND sp.Status = 0  <!-- 0은 미참여 상태를 나타낸다고 가정 -->
</insert>
<!-- 개별 알림 -->
<insert id="insertNotifications">
    INSERT INTO Notifications (UserID, IdeaID, Message, IsRead, IsDelete, CreatedAt,RoomID)
    VALUES
    <foreach collection="userIdList" item="userId" index="index" separator=",">
            (#{userId}, 0, #{message}, 0, 0, NOW(),#{roomId})
    </foreach>
</insert>
	<!-- 초안 투표 진행하기 누르면 타이머 업데이트되는 쿼리 -->
	<update id="stageTwoTimerUpdate">
		update Timer set StartTime=now(), endTime=#{param2}
		where RoomID=#{param1}
	</update>

	<!-- 반려사유 추가 -->
	<insert id="updateRejectLog">
		insert INTO RejectLog (RoomID,IdeaID,RejectContents)
		values
		(#{param1},#{param2},#{param3})
	</insert>
	<!-- -->
	<update id="isRejectUpdate">
		update Ideas set isReject=1 where IdeaID=#{param1}
	</update>

	<!-- 반려사유 가져오는 쿼리 -->
	<select id="rejectLogSelect" resultType="String">
		SELECT RejectContents
		FROM RejectLog WHERE IdeaID = #{param1}
	</select>

	<!-- 반려시 안내 알림 보내는 쿼리 -->
	<insert id="makeNotification">
		INSERT INTO Notifications
		(UserID,IdeaID,Message,CreatedAt,RoomID) values
		(#{param1},#{param2},#{param3},now(),#{param4})
	</insert>

<!-- 투표 끝난뒤에 목록 확인// 아이디어 제공자의 전체 누적 기여도 조건 추가 -->
<select id="ideaPickNum" resultType="com.kb.star.dto.Ideas">
	SELECT t.IdeaID, t.UserID, t.RoomID, t.Title, t.Description, t.IsDelete, t.StageID, t.PickNum, t.isReject from
	(SELECT i.*, COALESCE(SUM(m.ContributionCnt), 0) AS TotalContribution FROM Ideas i LEFT JOIN MeetingRoomMembers m 
	ON i.UserID = m.UserID WHERE i.RoomID = #{param1} AND i.IsDelete = 0 AND i.isReject = 0 GROUP BY i.UserID, i.IdeaID
	ORDER by PickNum desc, TotalContribution desc) t
</select>

<!-- 기여도 +1 -->
<update id="contributionUpdate">
	UPDATE MeetingRoomMembers set ContributionCnt = ContributionCnt+1 where RoomID=#{param1} AND UserID=#{param2}
</update>

<!-- 투표로 선택된 2개 아이디어에 대해 StageID 1 -> 3 으로 변경 -->
<update id="updateIdeaStage3">
	UPDATE Ideas set StageID=3 WHERE IdeaID=#{param1}
</update>

<!-- 선택된 아이디어 누구껀지 id조회 -->
<select id="pickedIdeaUser" resultType="int">
SELECT UserID FROM Ideas WHERE RoomID=#{param2} and IsDelete=0 and IdeaID=#{param1}
</select>

<!-- 선택되면 yesPick으로 바꾸고 기여도 +1 -->
<update id="updateYesPickNContribution">
	UPDATE MeetingRoomMembers SET Role='yesPick' WHERE RoomID=#{param1} and UserID=#{param2}
</update>

<!-- 선택된 아이디어별로 타이머 신규 생성 -->
<insert id="insertNewTimerForIdea">
	INSERT INTO Timer values (#{param1},#{param2},now(),#{param3})
</insert>

<insert id="insertForwardStage3">
	INSERT into StageParticipation (IdeaID,StageID,UserID,Status,RoomID) values (#{param1},3,#{param2},0,#{param3})
</insert>

<!-- stage3인(=투표로 선택된) 아이디어만 찾는 쿼리 -->
<select id="yesPickIdeaList" resultType="com.kb.star.dto.Ideas">
	SELECT * from Ideas WHERE RoomID=#{param1} and StageID>=3
</select>

<!-- 반려된 내용 제거하고 방장이 보는 리스트 -->
<select id="ideaListUnreject" resultType="com.kb.star.dto.Ideas">
	SELECT * FROM Ideas WHERE RoomID=#{param1} and IsDelete=0 and StageID=#{param2} and isReject=0
</select>

<select id="alreadySubmitIdea" resultType="com.kb.star.dto.Ideas">
	SELECT * FROM Ideas where RoomID = #{param1} and UserID = #{param2} and IsDelete=0 and isReject=0
</select>

<select id="rejectedIdea" resultType="com.kb.star.dto.Ideas">
	SELECT * FROM Ideas where RoomID = #{param1} and UserID = #{param2} and isReject=1 ORDER by IdeaID desc limit 1
</select>

<select id="whatsRejectLog" resultType="com.kb.star.dto.RejectLog">
	SELECT * FROM RejectLog WHERE IdeaID = #{param1}
</select>

<!-- 방에 총 몇명인지 -->
<select id="totalRoomUsers" resultType="int">
	SELECT count(UserID) from MeetingRoomMembers WHERE RoomID = #{param1} and IsDelete = 0
</select>

<!-- 아이디어 제출건수 몇갠지 -->
<select id="submitRoomUser" resultType="int">
	SELECT count(IdeaID) from Ideas WHERE RoomID = #{param1} and IsDelete = 0 and isReject = 0
</select>

<!-- 투표인원 몇명인지 -->
<select id="voteRoomUsers" resultType="int">
	SELECT count(*) from StageParticipation WHERE RoomID = #{param1} and StageID =2 and Status =1
</select>

<!-- 오른쪽 사이드바용 -->
<select id="roomIdFormember" resultType="int">
	SELECT UserID from MeetingRoomMembers WHERE RoomID = #{param1} and IsDelete = 0
</select>

<select id="whosMember" resultType="com.kb.star.dto.UsersDto">
	SELECT * from Users WHERE UserID = #{param1}
</select>

<!-- 마지막 단계 사용자가보는 로드맵에 필요한 데이터 -->
<select id="totalIdea" resultType="com.kb.star.dto.Ideas">
	SELECT * FROM Ideas WHERE RoomID = #{param1} and IsDelete = 0
</select>

<select id="ideaIdForOpinion" resultType="com.kb.star.dto.IdeaOpinionsDto">
	SELECT * FROM IdeaOpinions WHERE IdeaID = #{param1} and IsDelete = 0
</select>

<select id="memberForRoomId" resultType="com.kb.star.dto.MeetingRoomMember">
	SELECT * from MeetingRoomMembers WHERE RoomID = #{param1}
</select>
<!-- 직원검색 -->
<select id="selectCurrentMembers" resultType="com.kb.star.dto.MeetingRoomMembers">
    SELECT m.RoomID, m.UserID, m.Role, m.ContributionCnt, 
           u.UserName, u.Email, u.birth,
           d.DepartmentName, t.TeamName
    FROM MeetingRoomMembers m
    JOIN Users u ON m.UserID = u.UserID
    JOIN Departments d ON u.DepartmentID = d.DepartmentID
    JOIN Teams t ON u.TeamID = t.TeamID
    WHERE m.RoomID = #{roomId}
    AND m.IsDelete = 0
    AND u.IsDelete = 0
    <if test="searchKeyword != null and searchKeyword != ''">
        AND (u.UserName LIKE CONCAT('%', #{searchKeyword}, '%')
        OR t.TeamName LIKE CONCAT('%', #{searchKeyword}, '%'))
    </if>
</select>
<select id="rejectList" resultType="com.kb.star.dto.RejectLog">
	SELECT rl.RejectContents rejectContents, i.Title rejectIdeaTitle, i.Description description 
	from Ideas i inner join RejectLog rl on i.IdeaID = rl.IdeaID 
	WHERE i.RoomID = #{param1} and i.UserID = #{param2} and i.isReject = 1
</select>

<!-- 오른쪽 사이드바용 기여도 -->
<select id="totalContributionNum" resultType="int">
	SELECT sum(ContributionCnt) total from MeetingRoomMembers WHERE RoomID = #{param1} and IsDelete=0
</select>

<select id="myContributionNum" resultType="int">
	SELECT ContributionCnt from MeetingRoomMembers WHERE RoomID = #{param1} and UserID = #{param2} and IsDelete=0
</select>

<!-- 기여도 +5 -->
<update id="contributionFivePoint">
	UPDATE MeetingRoomMembers set ContributionCnt = ContributionCnt+5 where RoomID=#{param1} AND UserID=#{param2}
</update>
</mapper>